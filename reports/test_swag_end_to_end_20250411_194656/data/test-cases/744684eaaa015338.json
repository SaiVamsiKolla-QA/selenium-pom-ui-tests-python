{"uid":"744684eaaa015338","name":"test_swag_end_to_end[standard_user]","fullName":"tests.test_end_to_end#test_swag_end_to_end","historyId":"7c77363f7b07fc01894d0f2d79b7c501","time":{"start":1744362717369,"stop":1744362731606,"duration":14237},"status":"failed","statusMessage":"AssertionError: Failed to navigate to overview page\nassert False\n +  where False = is_overview_page_loaded()\n +    where is_overview_page_loaded = <Pages.checkout_overview_page.CheckoutOverviewPage object at 0x106a95160>.is_overview_page_loaded","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"c143c287732933e1339937b75514395f\")>, username = 'standard_user', password = 'secret_sauce'\n\n    @allure.epic(\"Swag Labs E-commerce\")\n    @allure.feature(\"Checkout Process\")\n    @pytest.mark.parametrize(\"username,password\", [\n        # Test data: Standard user credentials expected to log in successfully\n        pytest.param(\"standard_user\", \"secret_sauce\", id=\"standard_user\"),\n    ])\n    def test_swag_end_to_end(driver, username, password):\n        allure.dynamic.story(f\"User {username} completes full checkout process\")\n        allure.dynamic.severity(allure.severity_level.CRITICAL)\n    \n        login_page = LoginPage(driver)\n        product_page = ProductPage(driver)\n        cart_page = CartPage(driver)\n        info_page = CheckoutInfoPage(driver)\n        overview_page = CheckoutOverviewPage(driver)\n    \n        # -------------------------------\n        # Step 1: Perform Login using provided credentials.\n        # -------------------------------\n        with allure.step(f\"Login as {username}\"):\n            login_page.login_as(username, password, url=\"https://www.saucedemo.com/\")\n            assert product_page.is_product_page_loaded(), f\"Login failed for {username}\"\n            print(f\"\\nStep_01_Login_Successful_{username}\")\n            screenshot = Utility.capture_screenshot(driver, f\"Step_01_Login_Successful_{username}\")\n            allure.attach(screenshot,\n                          name=f\"Step_01_Login_Successful_{username}\",\n                          attachment_type=allure.attachment_type.PNG)\n    \n        # -------------------------------\n        # Step 2: Add two random products to the cart\n        # -------------------------------\n        with allure.step(\"Select and add random products to cart\"):\n            all_products = product_page.available_products.copy()\n            products_to_add = random.sample(all_products, 2)\n            expected_count = len(products_to_add)\n    \n            product_list = \", \".join(products_to_add)\n            allure.attach(f\"Products to add: {product_list}\",\n                          name=\"Selected Products\",\n                          attachment_type=allure.attachment_type.TEXT)\n    \n            print(f\"\\nRandomly selected products to add: {products_to_add}\")\n            successful_adds = 0\n    \n            for index, product_id in enumerate(products_to_add, 1):\n                with allure.step(f\"Add product {index}: {product_id}\"):\n                    if product_page.add_product_to_cart(product_id):\n                        successful_adds += 1\n                        ordinal = get_ordinal(index)\n                        print(f\"Added the {ordinal} Item: {product_id}\")\n    \n        # -------------------------------\n        # Step 2.2: Verify the cart count matches the number of added products\n        # -------------------------------\n        with allure.step(\"Verify cart count\"):\n            driver.refresh()\n            cart_count = product_page.get_cart_count()\n            print(f\"Step_02_Products_Added_{cart_count}_Items_To_Cart\")\n    \n            screenshot = Utility.capture_screenshot(driver, f\"Step_02_Products_Added_{cart_count}_Items_To_Cart\")\n            allure.attach(screenshot,\n                          name=f\"Step_02_Products_Added_{cart_count}_Items_To_Cart\",\n                          attachment_type=allure.attachment_type.PNG)\n    \n            allure.attach(f\"Cart count: {cart_count}, Expected: {expected_count}\",\n                          name=\"Cart Count Verification\",\n                          attachment_type=allure.attachment_type.TEXT)\n    \n            assert cart_count == expected_count, f\"Expected cart count to be {expected_count}, but got {cart_count}\"\n    \n        # -------------------------------\n        # Step 3: Navigate to the cart page.\n        # -------------------------------\n        with allure.step(\"Navigate to cart page\"):\n            product_page.go_to_cart()\n            # Assert that we successfully navigated to the cart page\n            assert cart_page.is_cart_page_loaded(), \"Failed to navigate to cart page\"\n            print(\"\\nStep_03_Cart_Items_Available_In_Cart\")\n    \n            screenshot = Utility.capture_screenshot(driver, \"Step_03_Cart_Items are available in the cart\")\n            allure.attach(screenshot,\n                          name=\"Step_03_Cart_Items_Available_In_Cart\",\n                          attachment_type=allure.attachment_type.PNG)\n    \n        # -------------------------------\n        # Step 4: Click the checkout button.\n        # -------------------------------\n        with allure.step(\"Click checkout button\"):\n            cart_page.click_checkout()\n            assert info_page.is_info_page_loaded(), \"Failed to navigate to checkout information page\"\n            print(\"Step_04_Cart_Page_Checkout_Clicked.\")\n    \n            screenshot = Utility.capture_screenshot(driver, \"Step_04_Cart_Checkout_Button is Clicked.\")\n            allure.attach(screenshot,\n                          name=\"Step_04_Cart_Checkout_Button_Clicked\",\n                          attachment_type=allure.attachment_type.PNG)\n    \n        # -------------------------------\n        # Step 5: Fill out the checkout information\n        # -------------------------------\n        with allure.step(\"Enter checkout information\"):\n            print(\"Entering checkout information\")\n    \n            # Use the page object methods to enter data\n            with allure.step(\"Enter first name: Vamsi\"):\n                info_page.enter_first_name(\"Vamsi\")\n    \n            with allure.step(\"Enter last name: Kolla\"):\n                info_page.enter_last_name(\"Kolla\")\n    \n            with allure.step(\"Enter postal code: T6H5J3\"):\n                info_page.enter_postal_code(\"T6H5J3\")\n    \n            # Verify that the fields contain the expected values with a single method call\n            with allure.step(\"Verify entered information\"):\n                info_page.verify_checkout_information(\"Vamsi\", \"Kolla\", \"T6H5J3\")\n                allure.attach(\"First Name: Vamsi\\nLast Name: Kolla\\nPostal Code: T6H5J3\",\n                              name=\"Checkout Information\",\n                              attachment_type=allure.attachment_type.TEXT)\n    \n            print(\"Step_05_Checkout_Info_Entered\")\n            screenshot = Utility.capture_screenshot(driver, \"Step_05_Checkout_Info_Entered\")\n            allure.attach(screenshot,\n                          name=\"Step_05_Checkout_Info_Entered\",\n                          attachment_type=allure.attachment_type.PNG)\n    \n        # -------------------------------\n        # Step 6: Click the continue button and verify navigation to overview page\n        # -------------------------------\n        with allure.step(\"Click continue button and navigate to overview page\"):\n            print(\"\\nStep_06_Clicking_Continue_Button\")\n            info_page.click_continue()\n>           assert overview_page.is_overview_page_loaded(), \"Failed to navigate to overview page\"\nE           AssertionError: Failed to navigate to overview page\nE           assert False\nE            +  where False = is_overview_page_loaded()\nE            +    where is_overview_page_loaded = <Pages.checkout_overview_page.CheckoutOverviewPage object at 0x106a95160>.is_overview_page_loaded\n\ntests/test_end_to_end.py:183: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"driver","time":{"start":1744362716225,"stop":1744362717368,"duration":1143},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: Failed to navigate to overview page\nassert False\n +  where False = is_overview_page_loaded()\n +    where is_overview_page_loaded = <Pages.checkout_overview_page.CheckoutOverviewPage object at 0x106a95160>.is_overview_page_loaded","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"c143c287732933e1339937b75514395f\")>, username = 'standard_user', password = 'secret_sauce'\n\n    @allure.epic(\"Swag Labs E-commerce\")\n    @allure.feature(\"Checkout Process\")\n    @pytest.mark.parametrize(\"username,password\", [\n        # Test data: Standard user credentials expected to log in successfully\n        pytest.param(\"standard_user\", \"secret_sauce\", id=\"standard_user\"),\n    ])\n    def test_swag_end_to_end(driver, username, password):\n        allure.dynamic.story(f\"User {username} completes full checkout process\")\n        allure.dynamic.severity(allure.severity_level.CRITICAL)\n    \n        login_page = LoginPage(driver)\n        product_page = ProductPage(driver)\n        cart_page = CartPage(driver)\n        info_page = CheckoutInfoPage(driver)\n        overview_page = CheckoutOverviewPage(driver)\n    \n        # -------------------------------\n        # Step 1: Perform Login using provided credentials.\n        # -------------------------------\n        with allure.step(f\"Login as {username}\"):\n            login_page.login_as(username, password, url=\"https://www.saucedemo.com/\")\n            assert product_page.is_product_page_loaded(), f\"Login failed for {username}\"\n            print(f\"\\nStep_01_Login_Successful_{username}\")\n            screenshot = Utility.capture_screenshot(driver, f\"Step_01_Login_Successful_{username}\")\n            allure.attach(screenshot,\n                          name=f\"Step_01_Login_Successful_{username}\",\n                          attachment_type=allure.attachment_type.PNG)\n    \n        # -------------------------------\n        # Step 2: Add two random products to the cart\n        # -------------------------------\n        with allure.step(\"Select and add random products to cart\"):\n            all_products = product_page.available_products.copy()\n            products_to_add = random.sample(all_products, 2)\n            expected_count = len(products_to_add)\n    \n            product_list = \", \".join(products_to_add)\n            allure.attach(f\"Products to add: {product_list}\",\n                          name=\"Selected Products\",\n                          attachment_type=allure.attachment_type.TEXT)\n    \n            print(f\"\\nRandomly selected products to add: {products_to_add}\")\n            successful_adds = 0\n    \n            for index, product_id in enumerate(products_to_add, 1):\n                with allure.step(f\"Add product {index}: {product_id}\"):\n                    if product_page.add_product_to_cart(product_id):\n                        successful_adds += 1\n                        ordinal = get_ordinal(index)\n                        print(f\"Added the {ordinal} Item: {product_id}\")\n    \n        # -------------------------------\n        # Step 2.2: Verify the cart count matches the number of added products\n        # -------------------------------\n        with allure.step(\"Verify cart count\"):\n            driver.refresh()\n            cart_count = product_page.get_cart_count()\n            print(f\"Step_02_Products_Added_{cart_count}_Items_To_Cart\")\n    \n            screenshot = Utility.capture_screenshot(driver, f\"Step_02_Products_Added_{cart_count}_Items_To_Cart\")\n            allure.attach(screenshot,\n                          name=f\"Step_02_Products_Added_{cart_count}_Items_To_Cart\",\n                          attachment_type=allure.attachment_type.PNG)\n    \n            allure.attach(f\"Cart count: {cart_count}, Expected: {expected_count}\",\n                          name=\"Cart Count Verification\",\n                          attachment_type=allure.attachment_type.TEXT)\n    \n            assert cart_count == expected_count, f\"Expected cart count to be {expected_count}, but got {cart_count}\"\n    \n        # -------------------------------\n        # Step 3: Navigate to the cart page.\n        # -------------------------------\n        with allure.step(\"Navigate to cart page\"):\n            product_page.go_to_cart()\n            # Assert that we successfully navigated to the cart page\n            assert cart_page.is_cart_page_loaded(), \"Failed to navigate to cart page\"\n            print(\"\\nStep_03_Cart_Items_Available_In_Cart\")\n    \n            screenshot = Utility.capture_screenshot(driver, \"Step_03_Cart_Items are available in the cart\")\n            allure.attach(screenshot,\n                          name=\"Step_03_Cart_Items_Available_In_Cart\",\n                          attachment_type=allure.attachment_type.PNG)\n    \n        # -------------------------------\n        # Step 4: Click the checkout button.\n        # -------------------------------\n        with allure.step(\"Click checkout button\"):\n            cart_page.click_checkout()\n            assert info_page.is_info_page_loaded(), \"Failed to navigate to checkout information page\"\n            print(\"Step_04_Cart_Page_Checkout_Clicked.\")\n    \n            screenshot = Utility.capture_screenshot(driver, \"Step_04_Cart_Checkout_Button is Clicked.\")\n            allure.attach(screenshot,\n                          name=\"Step_04_Cart_Checkout_Button_Clicked\",\n                          attachment_type=allure.attachment_type.PNG)\n    \n        # -------------------------------\n        # Step 5: Fill out the checkout information\n        # -------------------------------\n        with allure.step(\"Enter checkout information\"):\n            print(\"Entering checkout information\")\n    \n            # Use the page object methods to enter data\n            with allure.step(\"Enter first name: Vamsi\"):\n                info_page.enter_first_name(\"Vamsi\")\n    \n            with allure.step(\"Enter last name: Kolla\"):\n                info_page.enter_last_name(\"Kolla\")\n    \n            with allure.step(\"Enter postal code: T6H5J3\"):\n                info_page.enter_postal_code(\"T6H5J3\")\n    \n            # Verify that the fields contain the expected values with a single method call\n            with allure.step(\"Verify entered information\"):\n                info_page.verify_checkout_information(\"Vamsi\", \"Kolla\", \"T6H5J3\")\n                allure.attach(\"First Name: Vamsi\\nLast Name: Kolla\\nPostal Code: T6H5J3\",\n                              name=\"Checkout Information\",\n                              attachment_type=allure.attachment_type.TEXT)\n    \n            print(\"Step_05_Checkout_Info_Entered\")\n            screenshot = Utility.capture_screenshot(driver, \"Step_05_Checkout_Info_Entered\")\n            allure.attach(screenshot,\n                          name=\"Step_05_Checkout_Info_Entered\",\n                          attachment_type=allure.attachment_type.PNG)\n    \n        # -------------------------------\n        # Step 6: Click the continue button and verify navigation to overview page\n        # -------------------------------\n        with allure.step(\"Click continue button and navigate to overview page\"):\n            print(\"\\nStep_06_Clicking_Continue_Button\")\n            info_page.click_continue()\n>           assert overview_page.is_overview_page_loaded(), \"Failed to navigate to overview page\"\nE           AssertionError: Failed to navigate to overview page\nE           assert False\nE            +  where False = is_overview_page_loaded()\nE            +    where is_overview_page_loaded = <Pages.checkout_overview_page.CheckoutOverviewPage object at 0x106a95160>.is_overview_page_loaded\n\ntests/test_end_to_end.py:183: AssertionError","steps":[{"name":"Login as standard_user","time":{"start":1744362717369,"stop":1744362718150,"duration":781},"status":"passed","steps":[],"attachments":[{"uid":"d905911e4fdddfd5","name":"Step_01_Login_Successful_standard_user","source":"d905911e4fdddfd5.png","type":"image/png","size":815501}],"parameters":[],"stepsCount":0,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":1,"attachmentStep":false},{"name":"Select and add random products to cart","time":{"start":1744362718150,"stop":1744362718175,"duration":25},"status":"passed","steps":[{"name":"Add product 1: sauce-labs-bolt-t-shirt","time":{"start":1744362718150,"stop":1744362718163,"duration":13},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false},{"name":"Add product 2: sauce-labs-onesie","time":{"start":1744362718163,"stop":1744362718175,"duration":12},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false}],"attachments":[{"uid":"ab8855aed94f4cd9","name":"Selected Products","source":"ab8855aed94f4cd9.txt","type":"text/plain","size":59}],"parameters":[],"stepsCount":2,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":1,"attachmentStep":false},{"name":"Verify cart count","time":{"start":1744362718175,"stop":1744362718524,"duration":349},"status":"passed","steps":[],"attachments":[{"uid":"8c75fc6562cba40c","name":"Step_02_Products_Added_2_Items_To_Cart","source":"8c75fc6562cba40c.png","type":"image/png","size":820401},{"uid":"7d3987e6754c72ac","name":"Cart Count Verification","source":"7d3987e6754c72ac.txt","type":"text/plain","size":26}],"parameters":[],"stepsCount":0,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":2,"attachmentStep":false},{"name":"Navigate to cart page","time":{"start":1744362718524,"stop":1744362719763,"duration":1239},"status":"passed","steps":[],"attachments":[{"uid":"4ee52ffa80db3c00","name":"Step_03_Cart_Items_Available_In_Cart","source":"4ee52ffa80db3c00.png","type":"image/png","size":144347}],"parameters":[],"stepsCount":0,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":1,"attachmentStep":false},{"name":"Click checkout button","time":{"start":1744362719763,"stop":1744362720993,"duration":1230},"status":"passed","steps":[],"attachments":[{"uid":"7e1ebe2c12b9bbc6","name":"Step_04_Cart_Checkout_Button_Clicked","source":"7e1ebe2c12b9bbc6.png","type":"image/png","size":80494}],"parameters":[],"stepsCount":0,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":1,"attachmentStep":false},{"name":"Enter checkout information","time":{"start":1744362720993,"stop":1744362721222,"duration":229},"status":"passed","steps":[{"name":"Enter first name: Vamsi","time":{"start":1744362720993,"stop":1744362721018,"duration":25},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false},{"name":"Enter last name: Kolla","time":{"start":1744362721018,"stop":1744362721039,"duration":21},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false},{"name":"Enter postal code: T6H5J3","time":{"start":1744362721039,"stop":1744362721060,"duration":21},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false},{"name":"Verify entered information","time":{"start":1744362721060,"stop":1744362721070,"duration":10},"status":"passed","steps":[],"attachments":[{"uid":"95806b8fb60ca70","name":"Checkout Information","source":"95806b8fb60ca70.txt","type":"text/plain","size":54}],"parameters":[],"stepsCount":0,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":1,"attachmentStep":false}],"attachments":[{"uid":"6ba1ec58a01f363a","name":"Step_05_Checkout_Info_Entered","source":"6ba1ec58a01f363a.png","type":"image/png","size":80497}],"parameters":[],"stepsCount":4,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":2,"attachmentStep":false},{"name":"Click continue button and navigate to overview page","time":{"start":1744362721222,"stop":1744362731604,"duration":10382},"status":"failed","statusMessage":"AssertionError: Failed to navigate to overview page\nassert False\n +  where False = is_overview_page_loaded()\n +    where is_overview_page_loaded = <Pages.checkout_overview_page.CheckoutOverviewPage object at 0x106a95160>.is_overview_page_loaded\n","statusTrace":"  File \"/Users/vamsikolla/SwagLabs-POM-E2E/tests/test_end_to_end.py\", line 183, in test_swag_end_to_end\n    assert overview_page.is_overview_page_loaded(), \"Failed to navigate to overview page\"\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":true,"shouldDisplayMessage":true,"attachmentsCount":0,"attachmentStep":false}],"attachments":[{"uid":"f54af06cf869d065","name":"stdout","source":"f54af06cf869d065.txt","type":"text/plain","size":1261}],"parameters":[],"stepsCount":13,"hasContent":true,"shouldDisplayMessage":true,"attachmentsCount":9,"attachmentStep":false},"afterStages":[{"name":"driver::0","time":{"start":1744362731626,"stop":1744362731733,"duration":107},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false}],"labels":[{"name":"story","value":"User standard_user completes full checkout process"},{"name":"severity","value":"critical"},{"name":"feature","value":"Checkout Process"},{"name":"epic","value":"Swag Labs E-commerce"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_end_to_end"},{"name":"host","value":"Vamsis-MacBook-Air.local"},{"name":"thread","value":"12985-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_end_to_end"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"password","value":"'secret_sauce'"},{"name":"username","value":"'standard_user'"}],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"744684eaaa015338.json","parameterValues":["'secret_sauce'","'standard_user'"]}