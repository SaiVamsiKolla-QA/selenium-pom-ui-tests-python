{"uid":"fc32e5cd8edf362d","name":"test_swag_login[ performance_glitch_user-secret_sauce]","fullName":"tests.test_login#test_swag_login","historyId":"12f992e6dbfd57139b726ac01f83857a","time":{"start":1744361687688,"stop":1744361698176,"duration":10488},"description":"Test login functionality and verify the product page.","descriptionHtml":"<p>Test login functionality and verify the product page.</p>\n","status":"failed","statusMessage":"AssertionError: Login failed for  performance_glitch_user\nassert False","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"69191a636e4619afc272296ee5958a0f\")>, username = ' performance_glitch_user', password = 'secret_sauce'\n\n    @pytest.mark.parametrize(\"username,password\", [\n        (\"standard_user\", \"secret_sauce\"),\n        (\"locked_out_user\", \"secret_sauce\"),\n        (\"problem_user\", \"secret_sauce\"),\n        (\" performance_glitch_user\", \"secret_sauce\"),\n        (\"error_user\", \"secret_sauce\"),\n        (\"visual_user\", \"secret_sauce\"),\n    ])\n    @allure.epic(\"Swag Labs E-commerce\")\n    @allure.feature('Swag Login Feature')\n    def test_swag_login(driver, username, password):\n        \"\"\"Test login functionality and verify the product page.\"\"\"\n        allure.dynamic.story(f\"User {username} logs in\")\n    \n        login_page = LoginPage(driver)\n        product_page = ProductPage(driver)\n    \n        # -------------------------------\n        # Step 1: Perform Login using provided credentials.\n        # -------------------------------\n        with allure.step(f\"Login as {username}\"):\n            login_page.login_as(username, password, url=\"https://www.saucedemo.com/\")\n    \n        # -------------------------------\n        # Step 2: Verify login was successful by checking product page\n        # -------------------------------\n        with allure.step(\"Verify successful login\"):\n            is_product_page_loaded = product_page.is_product_page_loaded()\n    \n            # Take screenshot only if login was successful (we're on the product page)\n            if is_product_page_loaded:\n                print(f\"Step_01_{username} logged in successfully\")\n                screenshot_name = f\"Step_01_Login_Successful_{username}\"\n                screenshot = Utility.capture_screenshot(driver, screenshot_name)\n                allure.attach(screenshot,\n                              name=screenshot_name,\n                              attachment_type=allure.attachment_type.PNG)\n    \n            # Assert that login was successful\n>           assert is_product_page_loaded, f\"Login failed for {username}\"\nE           AssertionError: Login failed for  performance_glitch_user\nE           assert False\n\ntests/test_login.py:77: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"driver","time":{"start":1744361686716,"stop":1744361687687,"duration":971},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false}],"testStage":{"description":"Test login functionality and verify the product page.","status":"failed","statusMessage":"AssertionError: Login failed for  performance_glitch_user\nassert False","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"69191a636e4619afc272296ee5958a0f\")>, username = ' performance_glitch_user', password = 'secret_sauce'\n\n    @pytest.mark.parametrize(\"username,password\", [\n        (\"standard_user\", \"secret_sauce\"),\n        (\"locked_out_user\", \"secret_sauce\"),\n        (\"problem_user\", \"secret_sauce\"),\n        (\" performance_glitch_user\", \"secret_sauce\"),\n        (\"error_user\", \"secret_sauce\"),\n        (\"visual_user\", \"secret_sauce\"),\n    ])\n    @allure.epic(\"Swag Labs E-commerce\")\n    @allure.feature('Swag Login Feature')\n    def test_swag_login(driver, username, password):\n        \"\"\"Test login functionality and verify the product page.\"\"\"\n        allure.dynamic.story(f\"User {username} logs in\")\n    \n        login_page = LoginPage(driver)\n        product_page = ProductPage(driver)\n    \n        # -------------------------------\n        # Step 1: Perform Login using provided credentials.\n        # -------------------------------\n        with allure.step(f\"Login as {username}\"):\n            login_page.login_as(username, password, url=\"https://www.saucedemo.com/\")\n    \n        # -------------------------------\n        # Step 2: Verify login was successful by checking product page\n        # -------------------------------\n        with allure.step(\"Verify successful login\"):\n            is_product_page_loaded = product_page.is_product_page_loaded()\n    \n            # Take screenshot only if login was successful (we're on the product page)\n            if is_product_page_loaded:\n                print(f\"Step_01_{username} logged in successfully\")\n                screenshot_name = f\"Step_01_Login_Successful_{username}\"\n                screenshot = Utility.capture_screenshot(driver, screenshot_name)\n                allure.attach(screenshot,\n                              name=screenshot_name,\n                              attachment_type=allure.attachment_type.PNG)\n    \n            # Assert that login was successful\n>           assert is_product_page_loaded, f\"Login failed for {username}\"\nE           AssertionError: Login failed for  performance_glitch_user\nE           assert False\n\ntests/test_login.py:77: AssertionError","steps":[{"name":"Login as  performance_glitch_user","time":{"start":1744361687688,"stop":1744361688171,"duration":483},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false},{"name":"Verify successful login","time":{"start":1744361688171,"stop":1744361698176,"duration":10005},"status":"failed","statusMessage":"AssertionError: Login failed for  performance_glitch_user\nassert False\n","statusTrace":"  File \"/Users/vamsikolla/SwagLabs-POM-E2E/tests/test_login.py\", line 77, in test_swag_login\n    assert is_product_page_loaded, f\"Login failed for {username}\"\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":true,"shouldDisplayMessage":true,"attachmentsCount":0,"attachmentStep":false}],"attachments":[{"uid":"16e2cca55baf0041","name":"stdout","source":"16e2cca55baf0041.txt","type":"text/plain","size":110}],"parameters":[],"stepsCount":2,"hasContent":true,"shouldDisplayMessage":true,"attachmentsCount":1,"attachmentStep":false},"afterStages":[{"name":"driver::0","time":{"start":1744361698178,"stop":1744361698289,"duration":111},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false}],"labels":[{"name":"story","value":"User  performance_glitch_user logs in"},{"name":"feature","value":"Swag Login Feature"},{"name":"epic","value":"Swag Labs E-commerce"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_login"},{"name":"host","value":"Vamsis-MacBook-Air.local"},{"name":"thread","value":"12048-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_login"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"password","value":"'secret_sauce'"},{"name":"username","value":"' performance_glitch_user'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"fc32e5cd8edf362d.json","parameterValues":["'secret_sauce'","' performance_glitch_user'"]}