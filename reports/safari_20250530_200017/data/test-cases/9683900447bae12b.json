{"uid":"9683900447bae12b","name":"test_swag_login[standard_user-secret_sauce]","fullName":"Tests.test_swag_login#test_swag_login","historyId":"d4cf0782aadf59b185055ee41b082cb1","time":{"start":1748656815841,"stop":1748656815841,"duration":0},"description":"Test login functionality and verify the product page with screenshot attachments.","descriptionHtml":"<p>Test login functionality and verify the product page with screenshot attachments.</p>\n","status":"broken","statusMessage":"selenium.common.exceptions.SessionNotCreatedException: Message: Could not create a session: The automation session ended unexpected while attempting to pair with it.","statusTrace":"browser_name = 'safari'\n\n    @pytest.fixture(scope='function')\n    def driver(browser_name):\n        \"\"\"Initialize and configure the WebDriver based on browser selection\"\"\"\n    \n        # Detect if running in CI environment\n        is_ci = os.environ.get('CI') == 'true' or os.environ.get('GITHUB_ACTIONS') == 'true'\n    \n        # Chrome browser configuration\n        if browser_name == \"chrome\":\n            options = ChromeOptions()\n            if is_ci:\n                options.add_argument(\"--headless\")\n                options.add_argument(\"--no-sandbox\")\n                options.add_argument(\"--disable-dev-shm-usage\")\n                options.add_argument(\"--disable-gpu\")\n                options.add_argument(\"--window-size=1920,1080\")\n            driver = webdriver.Chrome(options=options)\n        # Firefox browser configuration\n        elif browser_name == \"firefox\":\n            options = FirefoxOptions()\n            if is_ci:\n                options.add_argument(\"--headless\")\n            driver = webdriver.Firefox(options=options)\n        # Microsoft Edge browser configuration\n        elif browser_name == \"edge\":\n            options = EdgeOptions()\n            if is_ci:\n                options.add_argument(\"--headless\")\n            driver = webdriver.Edge(options=options)\n        # Safari browser configuration\n        elif browser_name == \"safari\":\n            options = SafariOptions()\n            if is_ci:\n                options.add_argument(\"--headless\")\n>           driver = webdriver.Safari()\n\nTests/conftest.py:65: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.13/site-packages/selenium/webdriver/safari/webdriver.py:60: in __init__\n    super().__init__(command_executor=executor, options=options)\n.venv/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:250: in __init__\n    self.start_session(capabilities)\n.venv/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:342: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n.venv/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x102919400>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"Could not create a session: The automation session ended unexpected while attempting to pair with it.\",\"stacktrace\":\"\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: Could not create a session: The automation session ended unexpected while attempting to pair with it.\n\n.venv/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: SessionNotCreatedException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"browser_name","time":{"start":1748656815841,"stop":1748656815841,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false},{"name":"driver","time":{"start":1748656815841,"stop":1748656817632,"duration":1791},"status":"broken","statusMessage":"selenium.common.exceptions.SessionNotCreatedException: Message: Could not create a session: The automation session ended unexpected while attempting to pair with it.\n\n","statusTrace":"  File \"/Users/vamsikolla/Desktop/Projects/Demos/selenium-pom-ui-tests-python/.venv/lib/python3.13/site-packages/pluggy/_callers.py\", line 166, in _multicall\n    teardown.throw(outcome._exception)\n    ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/vamsikolla/Desktop/Projects/Demos/selenium-pom-ui-tests-python/.venv/lib/python3.13/site-packages/_pytest/setuponly.py\", line 36, in pytest_fixture_setup\n    return (yield)\n            ^^^^^\n  File \"/Users/vamsikolla/Desktop/Projects/Demos/selenium-pom-ui-tests-python/.venv/lib/python3.13/site-packages/pluggy/_callers.py\", line 102, in _multicall\n    res = hook_impl.function(*args)\n  File \"/Users/vamsikolla/Desktop/Projects/Demos/selenium-pom-ui-tests-python/.venv/lib/python3.13/site-packages/_pytest/fixtures.py\", line 1139, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"/Users/vamsikolla/Desktop/Projects/Demos/selenium-pom-ui-tests-python/.venv/lib/python3.13/site-packages/_pytest/fixtures.py\", line 890, in call_fixture_func\n    fixture_result = next(generator)\n  File \"/Users/vamsikolla/Desktop/Projects/Demos/selenium-pom-ui-tests-python/Tests/conftest.py\", line 65, in driver\n    driver = webdriver.Safari()\n  File \"/Users/vamsikolla/Desktop/Projects/Demos/selenium-pom-ui-tests-python/.venv/lib/python3.13/site-packages/selenium/webdriver/safari/webdriver.py\", line 60, in __init__\n    super().__init__(command_executor=executor, options=options)\n    ~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/vamsikolla/Desktop/Projects/Demos/selenium-pom-ui-tests-python/.venv/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py\", line 250, in __init__\n    self.start_session(capabilities)\n    ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^\n  File \"/Users/vamsikolla/Desktop/Projects/Demos/selenium-pom-ui-tests-python/.venv/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py\", line 342, in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n               ~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/vamsikolla/Desktop/Projects/Demos/selenium-pom-ui-tests-python/.venv/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py\", line 429, in execute\n    self.error_handler.check_response(response)\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^\n  File \"/Users/vamsikolla/Desktop/Projects/Demos/selenium-pom-ui-tests-python/.venv/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py\", line 232, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":true,"shouldDisplayMessage":true,"attachmentsCount":0,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"epic","value":"Swag Labs E-commerce"},{"name":"feature","value":"Swag Login Feature"},{"name":"parentSuite","value":"Tests"},{"name":"suite","value":"test_swag_login"},{"name":"host","value":"Vamsis-MacBook-Air.local"},{"name":"thread","value":"26912-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Tests.test_swag_login"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"password","value":"'secret_sauce'"},{"name":"username","value":"'standard_user'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Browser Issues","messageRegex":".*WebDriver.*|.*browser.*|.*selenium.*","matchedStatuses":["failed","broken"]}],"tags":[]},"source":"9683900447bae12b.json","parameterValues":["'secret_sauce'","'standard_user'"]}