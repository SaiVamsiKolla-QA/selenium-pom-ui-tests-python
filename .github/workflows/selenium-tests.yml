name: CI with Dynamic Allure Report and Email

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest

    outputs:
      total: ${{ steps.summary.outputs.total }}
      passed: ${{ steps.summary.outputs.passed }}
      failed: ${{ steps.summary.outputs.failed }}
      duration: ${{ steps.summary.outputs.duration }}
      commit_message_text: ${{ steps.commit_info.outputs.commit_message_text }}

    steps:
      - name: Check out code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # For full git history if needed by commit message logic

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install system dependencies (jq and bc for summary)
        run: |
          sudo apt-get update
          sudo apt-get install -y jq bc

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          if; then
            pip install -r Requirements.txt
          else
            echo "Requirements.txt not found, skipping pip install -r."
          fi

      - name: Install Google Chrome
        run: |
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable

      - name: Install ChromeDriver
        run: |
          CHROME_VERSION=$(google-chrome --version | cut -d' ' -f3)
          CHROME_DRIVER_VERSION_FULL=$(wget -qO- https://chromedriver.storage.googleapis.com/LATEST_RELEASE_$(echo $CHROME_VERSION | cut -d'.' -f1,2,3))
          wget -qO chromedriver_linux64.zip https://chromedriver.storage.googleapis.com/${CHROME_DRIVER_VERSION_FULL}/chromedriver_linux64.zip
          sudo unzip -o chromedriver_linux64.zip -d /usr/local/bin/
          sudo chmod +x /usr/local/bin/chromedriver
          rm chromedriver_linux64.zip

      - name: Install Firefox
        run: |
          sudo apt-get update
          sudo apt-get install -y firefox

      - name: Install GeckoDriver
        run: |
          GECKODRIVER_VERSION=$(curl -s https://api.github.com/repos/mozilla/geckodriver/releases/latest | jq -r.tag_name)
          wget -qO geckodriver.tar.gz https://github.com/mozilla/geckodriver/releases/download/${GECKODRIVER_VERSION}/geckodriver-${GECKODRIVER_VERSION}-linux64.tar.gz
          sudo tar -xzf geckodriver.tar.gz -C /usr/local/bin/
          sudo chmod +x /usr/local/bin/geckodriver
          rm geckodriver.tar.gz

      - name: Install Microsoft Edge
        run: |
          sudo apt-get update
          sudo apt-get install -y software-properties-common apt-transport-https ca-certificates curl
          wget -q https://packages.microsoft.com/keys/microsoft.asc -O- | sudo apt-key add -
          sudo add-apt-repository "deb [arch=amd64] https://packages.microsoft.com/repos/edge stable main" -y
          sudo apt-get update
          sudo apt-get install -y microsoft-edge-stable

      - name: Install MSEdgeDriver
        run: |
          EDGEDRIVER_VERSION=$(curl -s https://msedgewebdriverstorage.blob.core.windows.net/edgewebdriver/LATEST_STABLE | iconv -f utf-16le -t utf-8 | sed 's/^[ \t]*//;s/[ \t]*$//')
          wget -qO msedgedriver.zip "https://msedgedriver.azureedge.net/${EDGEDRIVER_VERSION}/edgedriver_linux64.zip"
          sudo unzip -o msedgedriver.zip -d /usr/local/bin/
          sudo chmod +x /usr/local/bin/msedgedriver
          rm msedgedriver.zip

      - name: Make run_tests.sh executable
        run: |
          if [ -f./run_tests.sh ]; then
            chmod +x./run_tests.sh
          else
            echo "::error::run_tests.sh not found in the repository root."
            exit 1
          fi

      - name: Run Tests (All browsers, parallel, no HTML report from script)
        run: |
          echo "Executing run_tests.sh. Consider adding 'set -ex' to the top of run_tests.sh for detailed script debugging."
         ./run_tests.sh --all-browsers --parallel-browsers -p 2 --no-report

      - name: Check Allure Results Directory
        if: always() # Run this even if previous steps fail to see the state
        run: |
          echo "Listing contents of allure-results/parallel-multi-browser/..."
          ls -la allure-results/parallel-multi-browser/ |
| echo "Warning: allure-results/parallel-multi-browser/ not found or ls failed."

      - name: Generate Allure Report HTML
        id: allure_report_generation
        run: |
          ALLURE_VERSION="2.27.0" 
          echo "Downloading Allure CLI ${ALLURE_VERSION}..."
          wget -q https://github.com/allure-framework/allure2/releases/download/${ALLURE_VERSION}/allure-${ALLURE_VERSION}.zip
          unzip -q allure-${ALLURE_VERSION}.zip
          
          RESULTS_DIR="allure-results/parallel-multi-browser"
          REPORT_DIR="allure-report"

          echo "Checking Allure results directory: $RESULTS_DIR"
          if ||; then
            echo "::error::Allure results directory ($RESULTS_DIR) is missing or empty. Cannot generate report."
            exit 1
          fi
          
          echo "Generating Allure report from $RESULTS_DIR to $REPORT_DIR..."
         ./allure-${ALLURE_VERSION}/bin/allure generate "$RESULTS_DIR" --clean -o "$REPORT_DIR"
          ALLURE_EXIT_CODE=$?
          
          echo "Allure generate command exited with code: $ALLURE_EXIT_CODE"
          if; then
            echo "::error::Allure report generation failed with exit code $ALLURE_EXIT_CODE."
            exit $ALLURE_EXIT_CODE
          fi
          
          echo "Allure report generated successfully."
          rm allure-${ALLURE_VERSION}.zip
          rm -rf allure-${ALLURE_VERSION}

      - name: Check Allure Report Directory
        if: always() # Run this even if previous steps fail
        run: |
          echo "Listing contents of allure-report/..."
          ls -R allure-report/ |
| echo "Warning: allure-report/ not found or ls failed."

      - name: Upload Allure Report Artifact for GitHub Pages
        if: success() |
| failure() # Upload if job reaches this point, even if prior steps failed but job didn't halt
        uses: actions/upload-pages-artifact@v3
        with:
          path: "./allure-report"

      - name: Extract Test Summary
        if: success() |
| failure() # Extract if job reaches this point
        id: summary
        run: |
          STATS_FILE="allure-report/widgets/summary.json"
          if; then
            echo "::warning::Allure summary.json ($STATS_FILE) not found. Setting default summary values."
            echo "total=0" >> $GITHUB_OUTPUT
            echo "passed=0" >> $GITHUB_OUTPUT
            echo "failed=0" >> $GITHUB_OUTPUT
            echo "duration=0.00" >> $GITHUB_OUTPUT
          else
            TOTAL=$(jq '.statistic.total // 0' $STATS_FILE)
            PASSED=$(jq '.statistic.passed // 0' $STATS_FILE)
            FAILED=$(jq '.statistic.failed // 0' $STATS_FILE)
            DURATION_MS=$(jq '.time.duration // 0' $STATS_FILE)
            
            if!+(\.[0-9]+)?$ ]]; then
                DURATION_MS=0
            fi
            DURATION_SEC=$(echo "scale=2; $DURATION_MS / 1000" | bc)

            echo "total=$TOTAL" >> $GITHUB_OUTPUT
            echo "passed=$PASSED" >> $GITHUB_OUTPUT
            echo "failed=$FAILED" >> $GITHUB_OUTPUT
            echo "duration=$DURATION_SEC" >> $GITHUB_OUTPUT
            echo "Summary extracted: Total=$TOTAL, Passed=$PASSED, Failed=$FAILED, Duration=${DURATION_SEC}s"
          fi

      - name: Get Commit Message for Email
        id: commit_info
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)
          COMMIT_MSG="${COMMIT_MSG//'%'/'%25'}"
          COMMIT_MSG="${COMMIT_MSG//$'\n'/'%0A'}"
          COMMIT_MSG="${COMMIT_MSG//$'\r'/'%0D'}"
          echo "commit_message_text=$COMMIT_MSG" >> $GITHUB_OUTPUT

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: always()
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Send Allure Report Email
        env:
          SMTP_USER_EXISTS: ${{ secrets.SMTP_USERNAME }}
          SMTP_PASS_EXISTS: ${{ secrets.SMTP_PASSWORD }}
        if: ${{ (needs.test.result == 'success' |
| needs.test.result == 'failure') && env.SMTP_USER_EXISTS!= '' && env.SMTP_PASS_EXISTS!= '' }}
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: >
            Allure Report - ${{ github.repository }} | Status: ${{ needs.test.result }} | Event: ${{ github.event_name }}
          to: saivamsikolla@gmail.com
          from: GitHub Actions CI <${{ secrets.SMTP_USERNAME }}>
          body: |
            Hello,

            The automation test run for '${{ github.repository }}' has completed.
            Run Status: **${{ needs.test.result }}**

            Repository      : ${{ github.repository }}
            Workflow        : ${{ github.workflow }}
            Run ID          : ${{ github.run_id }}
            Run Number      : ${{ github.run_number }}
            Event Type      : ${{ github.event_name }}
            Triggered By    : ${{ github.actor }}
            Branch          : ${{ github.ref_name }}
            Commit          : https://github.com/${{ github.repository }}/commit/${{ github.sha }}
            Commit Message  : ${{ needs.test.outputs.commit_message_text }}

            Test Summary:
            Total Tests     : ${{ needs.test.outputs.total }}
            Tests Passed    : ${{ needs.test.outputs.passed }}
            Tests Failed    : ${{ needs.test.outputs.failed }}
            Duration        : ${{ needs.test.outputs.duration }} seconds

            View the full Allure Report:
            ${{ steps.deployment.outputs.page_url }}

            Regards,
            GitHub Actions CI