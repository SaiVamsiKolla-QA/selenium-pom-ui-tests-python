# This GitHub Actions workflow executes Selenium UI tests using a Selenium Grid.
# It includes the following major blocks:
# 1. Grid Services: Sets up Selenium Hub and browser nodes (Chrome, Firefox) as services.
# 2. Test Execution: Checks out code, sets up Python, installs dependencies,
#    waits for the Grid, and then runs pytest against multiple browsers.
#    Allure results are generated separately for each browser.
# 3. Allure Report Generation: Downloads the Allure CLI and generates a combined
#    HTML report from the results of all browser tests.
# 4. GitHub Pages Deployment: Uploads the generated Allure report as a GitHub Pages
#    artifact and deploys it, making the report accessible online.
# 5. Email Notification: Sends an email notification with a link to the deployed
#    Allure report upon completion.

name: Selenium Grid CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # Allows manual triggering of the workflow

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  ci:
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    services:
      # Selenium Grid Services: Hub and browser nodes
      selenium-hub:
        image: selenium/hub:4.18.1
        ports:
          - 4444:4444
          - 4442:4442
          - 4443:4443
        env:
          SE_NODE_MAX_SESSIONS: 4
          SE_NODE_OVERRIDE_MAX_SESSIONS: true
          SE_SESSION_REQUEST_TIMEOUT: 300
          SE_SESSION_RETRY_INTERVAL: 2
        options: >-
          --health-cmd "curl -f http://localhost:4444/wd/hub/status || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      node-chrome:
        image: selenium/node-chrome:4.18.1
        shm_size: 2gb
        volumes:
          - /dev/shm:/dev/shm
        env:
          SE_EVENT_BUS_HOST: selenium-hub
          SE_EVENT_BUS_PUBLISH_PORT: 4442
          SE_EVENT_BUS_SUBSCRIBE_PORT: 4443
          SE_NODE_MAX_SESSIONS: 1
          SE_NODE_OVERRIDE_MAX_SESSIONS: true
          SE_NODE_SESSION_TIMEOUT: 300
          SE_START_XVFB: false
          SE_SCREEN_WIDTH: 1920
          SE_SCREEN_HEIGHT: 1080
          SE_SCREEN_DEPTH: 24
          SE_SCREEN_DPI: 74
          SE_VNC_NO_PASSWORD: 1
          START_XVFB: false
        options: >-
          --health-cmd "curl -f http://selenium-hub:4444/wd/hub/status || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      node-firefox:
        image: selenium/node-firefox:4.18.1
        shm_size: 2gb
        volumes:
          - /dev/shm:/dev/shm
        env:
          SE_EVENT_BUS_HOST: selenium-hub
          SE_EVENT_BUS_PUBLISH_PORT: 4442
          SE_EVENT_BUS_SUBSCRIBE_PORT: 4443
          SE_NODE_MAX_SESSIONS: 1
          SE_NODE_OVERRIDE_MAX_SESSIONS: true
          SE_NODE_SESSION_TIMEOUT: 300
          SE_START_XVFB: false
          SE_SCREEN_WIDTH: 1920
          SE_SCREEN_HEIGHT: 1080
          SE_SCREEN_DEPTH: 24
          SE_SCREEN_DPI: 74
          SE_VNC_NO_PASSWORD: 1
          START_XVFB: false
        options: >-
          --health-cmd "curl -f http://selenium-hub:4444/wd/hub/status || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      # Initial setup steps
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Create requirements file
        run: |
          cat > requirements.txt << EOL
          allure-pytest==2.14.0
          allure-python-commons==2.14.0
          attrs==25.3.0
          certifi==2025.1.31
          charset-normalizer==3.4.1
          execnet==2.1.1
          h11==0.14.0
          idna==3.10
          iniconfig==2.1.0
          Jinja2==3.1.6
          MarkupSafe==3.0.2
          outcome==1.3.0.post0
          packaging==24.2
          pluggy==1.5.0
          PySocks==1.7.1
          pytest==8.3.5
          pytest-html==4.1.1
          pytest-metadata==3.1.1
          pytest-xdist==3.6.1
          pytest-rerunfailures==13.0
          python-dotenv==1.1.0
          requests==2.32.3
          selenium==4.18.1
          sniffio==1.3.1
          sortedcontainers==2.4.0
          trio==0.29.0
          trio-websocket==0.12.2
          typing_extensions==4.13.1
          urllib3==2.3.0
          webdriver-manager==4.0.2
          websocket-client==1.8.0
          wsproto==1.2.0
          EOL
          
          echo "Created requirements.txt with content:"
          cat requirements.txt

      - name: Debug repository content
        run: |
          echo "Current directory:"
          pwd
          echo "\nDirectory contents:"
          ls -la
          echo "\nRepository root contents:"
          ls -la $GITHUB_WORKSPACE
          echo "\nSearching for requirements files:"
          find . -name "requirements.txt" -o -name "pyproject.toml"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build test framework image
        run: |
          docker build -t test-framework:latest .
          docker images

      - name: Debug environment
        run: |
          echo "Python version:"
          python --version
          echo "Pip version:"
          pip --version
          echo "Docker version:"
          docker --version
          echo "Docker images:"
          docker images
          echo "Docker containers:"
          docker ps -a
          echo "Network status:"
          netstat -tulpn || true

      - name: Debug Selenium Grid
        run: |
          echo "Checking Selenium Grid status..."
          curl -v http://localhost:4444/status || true
          echo "Checking Grid Console..."
          curl -v http://localhost:4444/ui/index.html || true
          echo "Checking node registration..."
          curl -v http://localhost:4444/grid/console || true

      - name: Wait for Selenium Grid
        timeout-minutes: 2
        run: |
          echo "Waiting for Selenium Grid to be ready..."
          end=$((SECONDS + 120))
          while [ $SECONDS -lt $end ]; do
            status=$(curl -s http://localhost:4444/status)
            nodes_count=$(echo "$status" | jq '.value.nodes | length')
            is_ready=$(echo "$status" | jq '.value.ready')
            
            if [[ "$is_ready" == "true" && "$nodes_count" -gt 1 ]]; then
              echo "✅ Selenium Grid is ready!"
              echo "Grid Status:"
              echo "$status" | jq .
              echo "Node Count: $nodes_count"
              echo "Node Details:"
              echo "$status" | jq '.value.nodes'
              break
            fi
            
            echo "⏳ Grid not ready, retrying in 5s..."
            echo "Current Grid Status:"
            echo "$status" | jq .
            echo "Current Node Count: $nodes_count"
            echo "Grid Ready: $is_ready"
            sleep 5
          done
          
          status=$(curl -s http://localhost:4444/status)
          nodes_count=$(echo "$status" | jq '.value.nodes | length')
          is_ready=$(echo "$status" | jq '.value.ready')
          
          if [[ "$is_ready" != "true" || "$nodes_count" -le 1 ]]; then
            echo "❌ Timeout waiting for Selenium Grid"
            echo "Final Grid Status:"
            echo "$status" | jq .
            echo "Final Node Count: $nodes_count"
            echo "Grid Ready: $is_ready"
            exit 1
          fi

      - name: Create Allure results directories
        run: |
          mkdir -p allure-results/{chrome,firefox}
          chmod -R 777 allure-results

      # Test Execution Steps using Docker container
      - name: Run tests on Chrome
        id: chrome_tests
        continue-on-error: true
        env:
          SELENIUM_REMOTE_URL: http://selenium-hub:4444/wd/hub
          BROWSER: chrome
          PYTHONPATH: /usr/src/app
          SELENIUM_TIMEOUT: 30
          SELENIUM_IMPLICIT_WAIT: 10
        run: |
          echo "Running Chrome tests..."
          echo "Verifying Grid status before running tests..."
          curl -s http://localhost:4444/status | jq .
          
          docker run --rm \
            --network="${{ job.container.network }}" \
            -v "${PWD}:/usr/src/app" \
            -v /dev/shm:/dev/shm \
            -w /usr/src/app \
            -e BROWSER \
            -e SELENIUM_REMOTE_URL \
            -e PYTHONPATH \
            -e SELENIUM_TIMEOUT \
            -e SELENIUM_IMPLICIT_WAIT \
            -e PYTHONUNBUFFERED=1 \
            test-framework:latest \
            pytest Tests/ \
              --browser="${BROWSER}" \
              --remote-url="${SELENIUM_REMOTE_URL}" \
              -n 1 \
              --dist=loadfile \
              --alluredir=allure-results/chrome \
              --reruns 2 \
              --reruns-delay 1 \
              -v

      - name: Run tests on Firefox
        id: firefox_tests
        continue-on-error: true
        env:
          SELENIUM_REMOTE_URL: http://selenium-hub:4444/wd/hub
          BROWSER: firefox
          PYTHONPATH: /usr/src/app
          SELENIUM_TIMEOUT: 30
          SELENIUM_IMPLICIT_WAIT: 10
        run: |
          echo "Running Firefox tests..."
          echo "Verifying Grid status before running tests..."
          curl -s http://localhost:4444/status | jq .
          
          docker run --rm \
            --network="${{ job.container.network }}" \
            -v "${PWD}:/usr/src/app" \
            -v /dev/shm:/dev/shm \
            -w /usr/src/app \
            -e BROWSER \
            -e SELENIUM_REMOTE_URL \
            -e PYTHONPATH \
            -e SELENIUM_TIMEOUT \
            -e SELENIUM_IMPLICIT_WAIT \
            -e PYTHONUNBUFFERED=1 \
            test-framework:latest \
            pytest Tests/ \
              --browser="${BROWSER}" \
              --remote-url="${SELENIUM_REMOTE_URL}" \
              -n 1 \
              --dist=loadfile \
              --alluredir=allure-results/firefox \
              --reruns 2 \
              --reruns-delay 1 \
              -v

      - name: Check test results
        if: always()
        run: |
          echo "Test Results Summary:"
          echo "===================="
          echo "Chrome Tests: ${{ steps.chrome_tests.outcome }}"
          echo "Firefox Tests: ${{ steps.firefox_tests.outcome }}"
          
          # Store test status for email notification
          if [[ "${{ steps.chrome_tests.outcome }}" == "failure" && "${{ steps.firefox_tests.outcome }}" == "failure" ]]; then
            echo "❌ Both Chrome and Firefox tests failed"
            echo "test_status=failed" >> $GITHUB_ENV
          elif [[ "${{ steps.chrome_tests.outcome }}" == "failure" ]]; then
            echo "⚠️ Chrome tests failed, Firefox tests passed"
            echo "test_status=partial" >> $GITHUB_ENV
          elif [[ "${{ steps.firefox_tests.outcome }}" == "failure" ]]; then
            echo "⚠️ Firefox tests failed, Chrome tests passed"
            echo "test_status=partial" >> $GITHUB_ENV
          else
            echo "✅ All tests passed successfully"
            echo "test_status=passed" >> $GITHUB_ENV
          fi
          
          # Continue workflow even if tests failed
          exit 0

      # Allure Report Generation
      - name: Generate Combined Allure Report
        if: always()
        run: |
          echo "Generating Allure report..."
          ls -la allure-results/chrome || true
          ls -la allure-results/firefox || true
          
          # Install Allure CLI
          curl -o allure-2.24.1.tgz -OLs https://repo.maven.apache.org/maven2/io/qameta/allure/allure-commandline/2.24.1/allure-commandline-2.24.1.tgz
          tar -zxvf allure-2.24.1.tgz
          export PATH=$PATH:$PWD/allure-2.24.1/bin
          
          # Create base report structure even if no results
          mkdir -p allure-report
          
          if [ -d "allure-results/chrome" ] || [ -d "allure-results/firefox" ]; then
            allure generate \
              allure-results/chrome \
              allure-results/firefox \
              --clean \
              -o allure-report
          else
            echo "<html><body><h1>No test results available</h1></body></html>" > allure-report/index.html
          fi
          
          echo "Report generation complete"
          ls -la allure-report

      # GitHub Pages Deployment
      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        if: always()
        with:
          path: allure-report

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        if: always()

      - name: Send email notification
        uses: dawidd6/action-send-mail@v3
        if: always()
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: '[CI] Selenium Grid Test Results - ${{ env.test_status }} - ${{ github.repository }}'
          to: saivamsikolla@gmail.com
          from: GitHub Actions CI Bot <${{ secrets.SMTP_FROM_EMAIL_ADDRESS }}>
          html_body: |
            <h2>Selenium Grid Test Results</h2>
            <p><strong>Repository:</strong> ${{ github.repository }}</p>
            <p><strong>Workflow Run:</strong> <a href="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}">View Run Details</a></p>
            <p><strong>Commit:</strong> ${{ github.sha }}</p>
            <p><strong>Branch:</strong> ${{ github.ref_name }}</p>
            <p><strong>Triggered by:</strong> ${{ github.actor }}</p>
            
            <h3>Test Results:</h3>
            <ul>
              <li><strong>Chrome Tests:</strong> 
                ${{ steps.chrome_tests.outcome == 'success' && '✅ Passed' || '❌ Failed' }}
              </li>
              <li><strong>Firefox Tests:</strong> 
                ${{ steps.firefox_tests.outcome == 'success' && '✅ Passed' || '❌ Failed' }}
              </li>
            </ul>
            
            <h3>Overall Status: 
              ${{ env.test_status == 'passed' && '✅ All Tests Passed' || 
                  env.test_status == 'partial' && '⚠️ Some Tests Failed' || 
                  '❌ All Tests Failed' }}
            </h3>
            
            <p><strong>Test Report:</strong> <a href="${{ steps.deployment.outputs.page_url }}">View Allure Report</a></p>
            <br>
            <p>This is an automated message from GitHub Actions CI.</p>
