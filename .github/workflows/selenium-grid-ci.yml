# This GitHub Actions workflow executes Selenium UI tests using a Selenium Grid.
# It includes the following major blocks:
# 1. Grid Services: Sets up Selenium Hub and browser nodes (Chrome, Firefox) as services.
# 2. Test Execution: Checks out code, sets up Python, installs dependencies,
#    waits for the Grid, and then runs pytest against multiple browsers.
#    Allure results are generated separately for each browser.
# 3. Allure Report Generation: Downloads the Allure CLI and generates a combined
#    HTML report from the results of all browser tests.
# 4. GitHub Pages Deployment: Uploads the generated Allure report as a GitHub Pages
#    artifact and deploys it, making the report accessible online.
# 5. Email Notification: Sends an email notification with a link to the deployed
#    Allure report upon completion.

name: Selenium Grid CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # Allows manual triggering of the workflow

jobs:
  ci:
    runs-on: ubuntu-latest
    permissions:
      pages: write      # Required to deploy to GitHub Pages
      id-token: write   # Required for OIDC token authentication with GitHub Pages

    services:
      # Selenium Grid Services: Hub and browser nodes
      selenium-hub:
        image: selenium/hub:4.18.1
        ports:
          - 4444:4444
      node-chrome:
        image: selenium/node-chrome:4.18.1-20240224
        env:
          SE_EVENT_BUS_HOST: selenium-hub
          SE_EVENT_BUS_PUBLISH_PORT: 4442
          SE_EVENT_BUS_SUBSCRIBE_PORT: 4443
          # Optional: Add SHM_SIZE if needed for Chrome stability
          # SHM_SIZE: "2g"
      node-firefox:
        image: selenium/node-firefox:4.18.1-20240224
        env:
          SE_EVENT_BUS_HOST: selenium-hub
          SE_EVENT_BUS_PUBLISH_PORT: 4442
          SE_EVENT_BUS_SUBSCRIBE_PORT: 4443
          # Optional: Add SHM_SIZE if needed for Firefox stability
          # SHM_SIZE: "2g"

    steps:
      # Initial setup steps
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build test framework image
        run: |
          docker build -t test-framework:latest .

      # Debug step to verify Selenium Grid
      - name: Debug Selenium Grid
        run: |
          echo "Checking Selenium Grid status..."
          curl -s http://localhost:4444/status | jq .
          echo "Checking Grid Console..."
          curl -s http://localhost:4444/ui/index.html

      # Wait for the Selenium Grid to be ready before running tests
      - name: Wait for Selenium Grid
        run: |
          echo "Waiting for Selenium Grid to be ready..."
          timeout=180 # Increased timeout to 3 minutes
          interval=5  # seconds
          elapsed=0
          while true; do
            # Using curl with --fail to exit on HTTP error codes, simplifying status check
            if curl -s --fail http://localhost:4444/status | jq -e '.value.ready == true'; then
              echo "Selenium Grid is ready!"
              break
            fi
            elapsed=$((elapsed + interval))
            if [ "$elapsed" -ge "$timeout" ]; then
              echo "Timeout waiting for Selenium Grid after $elapsed seconds."
              # Optional: attempt to get more details from the grid status if timeout occurs
              curl -s http://localhost:4444/status
              exit 1
            fi
            echo "Grid not ready (elapsed: $elapsed s), retrying in $interval seconds..."
            sleep $interval
          done

      - name: Create Allure results directories
        run: mkdir -p allure-results/chrome allure-results/firefox

      # Test Execution Steps using Docker container
      - name: Run tests on Chrome
        env:
          SELENIUM_REMOTE_URL: http://localhost:4444/wd/hub
          BROWSER: chrome
        run: |
          docker run --rm \
            --network="host" \
            -v "${PWD}:/usr/src/app" \
            -w /usr/src/app \
            -e BROWSER \
            -e SELENIUM_REMOTE_URL \
            test-framework:latest \
            pytest Tests/ --browser="${BROWSER}" --remote-url="${SELENIUM_REMOTE_URL}" -n 4 --alluredir=allure-results/chrome

      - name: Run tests on Firefox
        env:
          SELENIUM_REMOTE_URL: http://localhost:4444/wd/hub
          BROWSER: firefox
        run: |
          docker run --rm \
            --network="host" \
            -v "${PWD}:/usr/src/app" \
            -w /usr/src/app \
            -e BROWSER \
            -e SELENIUM_REMOTE_URL \
            test-framework:latest \
            pytest Tests/ --browser="${BROWSER}" --remote-url="${SELENIUM_REMOTE_URL}" -n 4 --alluredir=allure-results/firefox

      # Allure Report Generation
      - name: Generate Combined Allure Report
        if: always()
        run: |
          # Ensure allure-results and allure-report directories exist
          mkdir -p allure-results/chrome allure-results/firefox allure-report

          # Check if any allure result files (xml or json) exist in the chrome or firefox allure-results directories
          if ls allure-results/chrome/*{json,xml} 1> /dev/null 2>&1 || \
             ls allure-results/firefox/*{json,xml} 1> /dev/null 2>&1; then
            echo "Allure result files found. Generating report..."
            docker run --rm \
              -v "${PWD}/allure-results:/usr/src/app/allure-results" \
              -v "${PWD}/allure-report:/usr/src/app/allure-report" \
              -w /usr/src/app \
              test-framework:latest \
              allure generate allure-results/chrome allure-results/firefox --clean -o allure-report
            echo "Allure report generated in ./allure-report"
          else
            echo "No Allure result files found. Creating a placeholder report."
            echo "<html><body><h1>No test results found.</h1></body></html>" > allure-report/index.html
          fi
          ls -la allure-report

      # GitHub Pages Deployment
      - name: Upload Allure report to Pages artifact
        uses: actions/upload-artifact@v4
        with:
          name: github-pages # Explicitly name the artifact
          path: allure-report # Directory containing the generated Allure report
        if: always()

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        if: always()

      - name: Send email notification
        uses: dawidd6/action-send-mail@v3
        if: always()  # Send email regardless of previous steps' status
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: '[CI] Selenium Grid Test Results - ${{ github.repository }}'
          to: saivamsikolla@gmail.com
          from: GitHub Actions CI Bot <${{ secrets.SMTP_FROM_EMAIL_ADDRESS }}>
          html_body: |
            <h2>Selenium Grid Test Results</h2>
            <p><strong>Repository:</strong> ${{ github.repository }}</p>
            <p><strong>Workflow Run:</strong> <a href="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}">View Run Details</a></p>
            <p><strong>Commit:</strong> ${{ github.sha }}</p>
            <p><strong>Branch:</strong> ${{ github.ref_name }}</p>
            <p><strong>Triggered by:</strong> ${{ github.actor }}</p>
            <br>
            <p><strong>Test Report:</strong> <a href="${{ steps.deployment.outputs.page_url }}">View Allure Report</a></p>
            <br>
            <p>This is an automated message from GitHub Actions CI.</p>
