# This GitHub Actions workflow executes Selenium UI tests using a Selenium Grid.
# It includes the following major blocks:
# 1. Grid Services: Sets up Selenium Hub and browser nodes (Chrome, Firefox) as services.
# 2. Test Execution: Checks out code, sets up Python, installs dependencies,
#    waits for the Grid, and then runs pytest against multiple browsers.
#    Allure results are generated separately for each browser.
# 3. Allure Report Generation: Downloads the Allure CLI and generates a combined
#    HTML report from the results of all browser tests.
# 4. GitHub Pages Deployment: Uploads the generated Allure report as a GitHub Pages
#    artifact and deploys it, making the report accessible online.
# 5. Email Notification: Sends an email notification with a link to the deployed
#    Allure report upon completion.

name: Selenium Grid CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # Allows manual triggering of the workflow

jobs:
  ci:
    runs-on: ubuntu-latest
    permissions:
      pages: write      # Required to deploy to GitHub Pages
      id-token: write   # Required for OIDC token authentication with GitHub Pages

    services:
      selenium-hub:
        image: selenium/hub:4.8.0-20230103 # Using a specific stable version
        ports:
          - 4444:4444
      node-chrome:
        image: selenium/node-chrome:4.8.0-20230103
        depends_on:
          - selenium-hub
        environment:
          SE_EVENT_BUS_HOST: selenium-hub
          SE_EVENT_BUS_PUBLISH_PORT: 4442
          SE_EVENT_BUS_SUBSCRIBE_PORT: 4443
          # Optional: Add SHM_SIZE if needed for Chrome stability
          # SHM_SIZE: "2g"
      node-firefox:
        image: selenium/node-firefox:4.8.0-20230103
        depends_on:
          - selenium-hub
        environment:
          SE_EVENT_BUS_HOST: selenium-hub
          SE_EVENT_BUS_PUBLISH_PORT: 4442
          SE_EVENT_BUS_SUBSCRIBE_PORT: 4443
          # Optional: Add SHM_SIZE if needed for Firefox stability
          # SHM_SIZE: "2g"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10' # As per existing workflow

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f Requirements.txt ]; then pip install -r Requirements.txt; fi

      - name: Download and unzip Allure CLI
        env:
          ALLURE_VERSION: "2.27.0" # Define ALLURE_VERSION
        run: |
          wget -qO allure.zip https://github.com/allure-framework/allure2/releases/download/${ALLURE_VERSION}/allure-${ALLURE_VERSION}.zip
          unzip -q allure.zip -d ./allure-cli
          rm allure.zip
          echo "${PWD}/allure-cli/allure-${ALLURE_VERSION}/bin" >> $GITHUB_PATH # Add allure to PATH
          allure --version # Verify Allure installation

      - name: Wait for Selenium Grid
        run: |
          echo "Waiting for Selenium Grid to be ready..."
          timeout=180 # Increased timeout to 3 minutes
          interval=5  # seconds
          elapsed=0
          while true; do
            # Using curl with --fail to exit on HTTP error codes, simplifying status check
            if curl -s --fail http://localhost:4444/status | jq -e '.value.ready == true'; then
              echo "Selenium Grid is ready!"
              break
            fi
            elapsed=$((elapsed + interval))
            if [ "$elapsed" -ge "$timeout" ]; then
              echo "Timeout waiting for Selenium Grid after $elapsed seconds."
              # Optional: attempt to get more details from the grid status if timeout occurs
              curl -s http://localhost:4444/status
              exit 1
            fi
            echo "Grid not ready (elapsed: $elapsed s), retrying in $interval seconds..."
            sleep $interval
          done

      - name: Make run_tests.sh executable
        run: chmod +x run_tests.sh

      - name: Run tests on Chrome
        env:
          SELENIUM_REMOTE_URL: http://localhost:4444/wd/hub
          BROWSER: chrome
          ALLURE_VERSION: "2.27.0" # Ensure ALLURE_VERSION is available if needed by test script/hooks
        run: ./run_tests.sh --alluredir=allure-results-chrome

      - name: Run tests on Firefox
        env:
          SELENIUM_REMOTE_URL: http://localhost:4444/wd/hub
          BROWSER: firefox
          ALLURE_VERSION: "2.27.0" # Ensure ALLURE_VERSION is available if needed by test script/hooks
        run: ./run_tests.sh --alluredir=allure-results-firefox

      - name: Generate Combined Allure Report
        env:
          ALLURE_VERSION: "2.27.0" # Ensure ALLURE_VERSION is available for the Allure CLI
        run: |
          echo "Generating combined Allure report from allure-results-chrome and allure-results-firefox..."
          ls -la # List files to confirm allure-results directories are present
          allure generate allure-results-chrome allure-results-firefox --clean -o allure-report
          echo "Allure report generated in ./allure-report"
          ls -la allure-report # Verify content of allure-report
        if: always() # Ensure this step runs even if tests fail, to report on failures

      - name: Upload Allure report to Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: allure-report # Directory containing the generated Allure report
        if: always() # Ensure this step runs even if tests or report generation fails (though report might be empty)

      - name: Deploy to GitHub Pages
        id: deployment # Give this step an ID to reference its outputs
        uses: actions/deploy-pages@v4
        if: always() # Ensure this step runs to attempt deployment or report deployment status

      - name: Send email notification
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.SMTP_USERNAME }} # SMTP username from secrets
          password: ${{ secrets.SMTP_PASSWORD }} # SMTP password from secrets
          subject: '[CI] ${{ github.repository }} – Selenium Grid Test Report Published'
          to: saivamsikolla@gmail.com # TODO: Replace with your desired email or use a secret like ${{ secrets.MAIL_TO }}
          from: GitHub Actions CI Bot <${{ secrets.SMTP_FROM_EMAIL_ADDRESS }}> # Using a specific FROM email via secrets for better deliverability
          body: |
            Hello,

            The Selenium Grid CI workflow for ${{ github.repository }} has completed.

            • Workflow Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            • Commit: ${{ github.sha }}

            View the Allure test report online:
            ${{ steps.deployment.outputs.page_url }}

            Regards,
            GitHub Actions CI Bot
        if: always() # Send email regardless of workflow status to report completion/failure
